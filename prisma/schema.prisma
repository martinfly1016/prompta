generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  name          String?
  role          String    @default("ADMIN") // ADMIN or EDITOR
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  icon        String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  prompts     Prompt[]

  @@index([slug])
}

model Prompt {
  id          String    @id @default(cuid())
  title       String
  description String
  content     String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  author      String?
  isPublished Boolean   @default(false)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  images      PromptImage[]
  // tags relationship temporarily disabled due to production migration pending
  // tags        Tag[]              @relation("PromptTags")

  @@index([categoryId])
  @@index([isPublished])
}

// Tag model temporarily disabled due to production migration pending
// model Tag {
//   id          String    @id @default(cuid())
//   name        String    @unique
//   slug        String    @unique
//   color       String    @default("blue") // Color variant: blue, purple, pink, green, etc.
//   description String?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   prompts     Prompt[]           @relation("PromptTags")

//   @@index([slug])
// }

model PromptImage {
  id        String   @id @default(cuid())
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  url       String   // Vercel Blob URL
  blobKey   String   // Blob storage key for deletion
  fileName  String   // Original filename
  fileSize  Int      // File size in bytes
  mimeType  String   // image/jpeg, image/png, etc.
  width     Int?     // Image width
  height    Int?     // Image height

  order     Int      @default(0) // Display order in gallery
  altText   String?  // Alt text for accessibility

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([promptId])
  @@index([order])
}
